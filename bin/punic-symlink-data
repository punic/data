#!/usr/bin/env php
<?php

function handleError($errno, $errstr, $errfile, $errline)
{
    throw new Exception("$errstr in $errfile @ line $errline", $errno);
}
set_error_handler('handleError');

try {
    if (isset($argv) && is_array($argv) && count($argv) > 1) {
        $optionArray = array_values($argv);
        array_shift($optionArray);
    } else {
        $optionArray = array();
    }
    $options = BuildOptions::fromArray($optionArray);
    echo 'Data directory: ', str_replace('/', DIRECTORY_SEPARATOR, $options->getDataDirectory()), "\n";
    echo 'Operation     : ', $options->getOperationName(), "\n";

    $symlinker = new Symlinker($options->getOperation());
    $symlinker->addDirectory($options->getDataDirectory());
    $symlinker->process();
    exit(0);
} catch (Exception $x) {
    echo "\n", $x->getMessage(), "\n";
    if (!$x instanceof UserMessageException) {
        echo "FILE: ", $x->getFile(), '@', $x->getLine(), "\n";
        if (method_exists($x, 'getTraceAsString')) {
            echo "TRACE:\n", $x->getTraceAsString(), "\n";
        }
    }
    exit(1);
}

class UserMessageException extends Exception
{
}

/**
 * Command options.
 */
class BuildOptions
{
    /**
     * Which operation should be performed.
     *
     * @var int|null
     */
    protected $operation;

    /**
     * Get the operation to be performed.
     *
     * @return int
     */
    public function getOperation()
    {
        return $this->operation;
    }

    /**
     * @return string
     */
    public function getOperationName()
    {
        switch ($this->operation) {
            case Symlinker::OPERATION_CREATE:
                return 'create symbolic links';
            case Symlinker::OPERATION_EXPAND:
                return 'remove (replace) symbolic links';
        }
    }
    /**
     * The data directory.
     *
     * @var string
     */
    protected $dataDirectory;

    /**
     * Get the output directory.
     *
     * @return string
     */
    public function getDataDirectory()
    {
        return $this->dataDirectory === null ? static::getDefaultDataDirectory() : $this->dataDirectory;
    }

    /**
     * @return string
     */
    protected static function getDefaultDataDirectory()
    {
        return rtrim(str_replace(DIRECTORY_SEPARATOR, '/', dirname(dirname(__FILE__))), '/').'/docs';
    }

    /**
     * Initializes the instance.
     */
    protected function __construct()
    {
        $this->operation = null;
        $this->outputDirectory = null;
    }

    /**
     * @param array $options
     *
     * @return BuildOptions
     */
    public static function fromArray(array $options)
    {
        $result = new static();
        $n = count($options);
        for ($i = 0; $i < $n; ++$i) {
            if (preg_match('/^(--[^=]+)=(.*)$/', $options[$i], $matches)) {
                $currentOption = $matches[1];
                $nextOption = $matches[2];
                $advanceNext = false;
            } else {
                $currentOption = $options[$i];
                $nextOption = $i + 1 < $n ? $options[$i + 1] : '';
                $advanceNext = true;
            }
            $optionWithValue = false;
            switch (strtolower($currentOption)) {
                case '-h':
                case '--help':
                    static::showHelp();
                    exit(0);
                case 'c':
                case 'create':
                    if ($result->operation !== null) {
                        throw new UserMessageException('Multiple operations specified');
                    }
                    $result->operation = Symlinker::OPERATION_CREATE;
                    break;
                case 'x':
                case 'expand':
                    if ($result->operation !== null) {
                        throw new UserMessageException('Multiple operations specified');
                    }
                    $result->operation = Symlinker::OPERATION_EXPAND;
                    break;
                case '--data':
                case '-d':
                    $optionWithValue = true;
                    if ($nextOption === '') {
                        throw new UserMessageException('Please specify the data directory');
                    }
                    if ($result->dataDirectory !== null) {
                        throw new UserMessageException('Multiple data directories specified');
                    }
                    $s = static::normalizeDirectoryPath($nextOption);
                    if ($s === null) {
                        throw new UserMessageException("$currentOption is not a valid data directory path");
                    }
                    if (!is_dir($s)) {
                        throw new UserMessageException("Data directory not found: $s");
                    }
                    $result->dataDirectory = $s;
                    break;
                default:
                    throw new UserMessageException("Unknown option: $currentOption\nUse -h (or --help) to get the list of available options.");
            }
            if ($optionWithValue && $advanceNext) {
                ++$i;
            }
        }
        if ($result->operation === null) {
            throw new UserMessageException("Missing the operation to be performed.\nUse -h (or --help) to get the list of available options.");
        }

        return $result;
    }

    /**
     * @param string|mixed $path
     *
     * @return string|null
     */
    protected static function normalizeDirectoryPath($path)
    {
        $result = null;
        if (is_string($path)) {
            $path = str_replace(DIRECTORY_SEPARATOR, '/', $path);
            if (stripos(PHP_OS, 'WIN') === 0) {
                $invalidChars = implode('', array_map('chr', range(0, 31))).'*?"<>|';
            } else {
                $invalidChars = '';
            }
            $path = rtrim($path, '/');
            if ($path !== '' && $invalidChars === '' || strpbrk($path, $invalidChars) === false) {
                $result = $path;
            }
        }

        return $result;
    }

    protected static function showHelp()
    {
        $defaultDataDirectory = str_replace('/', DIRECTORY_SEPARATOR, static::getDefaultDataDirectory());
        echo <<<EOT
Syntax: {$_SERVER['argv'][0]} [--help|-h] [--data=<path>|-d <path>] <c|create|x|expand>
Where

  --help|-h
    Show this help message

  --data=<path>|-v <path>
    Set the data directory (default: {$defaultDataDirectory})

  c|create
    create symbolic links

  x|expand
    replace symbolic links with the actual data
EOT;
    }
}

class Symlinker
{
    /**
     * Operation: create symlinks
     *
     * @var int
     */
    const OPERATION_CREATE = 1;

    /**
     * Operation: remove symlinks
     *
     * @var int
     */
    const OPERATION_EXPAND = 2;

    /**
     * @var int
     */
    protected $operation;

    /**
     * @var array
     */
    protected $filesMD5 = array();

    /**
     * @var array
     */
    protected $symlinks = array();

    /**
     * @var string[]|null
     */
    protected $linkProgram;
    
    /**
     * @param int $operation
     */
    public function __construct($operation)
    {
        $this->operation = $operation;
        if (DIRECTORY_SEPARATOR === '\\') {
            foreach (array(
                'mklink' => array(
                    'test' => '/?',
                    'testOk' => function($rc, array $output) {
                        foreach ($output as $line) {
                            if (preg_match('_^\s*MKLINK\\b_', $line) && strpos($line, '[/D]') !== false && strpos($line, '[/H]') !== false && strpos($line, '[/J]') !== false) {
                                return true;
                            }
                        }
                        return false;
                    },
                    'run' => '%2$s %1$s',
                ),
            ) as $program => $args) {
                $output = array();
                $rc = -1;
                @exec("{$program} {$args['test']} 2>&1", $output, $rc);
                if ($args['testOk']($rc, $output)) {
                    $this->linkProgram = array($program, $args['run']);
                    break;
                }
            }
            if ($this->linkProgram === null) {
                throw new Exception('On Windows the symlink() PHP function does not support relative paths, so we have to use MKLINK (but it has not been found).');
            }
        }
    }

    /**
     * @param string $fullDirectoryPath
     * @throws Exception
     */
    public function addDirectory($fullDirectoryPath)
    {
        $subdirectories = array();
        echo "Reading directory {$fullDirectoryPath}...";
        $hDir = @opendir($fullDirectoryPath);
        if ($hDir === false) {
            throw new Exception("Failed to open the directory {$fullDirectoryPath}");
        }
        while (($item = readdir($hDir)) !== false) {
            if ($item !== '.' && $item !== '..') {
                $fullItemPath = $fullDirectoryPath . '/' . $item;
                if (is_dir($fullItemPath)) {
                    $subdirectories[] = $fullItemPath;
                } else {
                    $this->addFile($fullItemPath);
                }
            }
        }
        closedir($hDir);
        echo "done.\n";
        foreach ($subdirectories as $subdirectory) {
            $this->addDirectory($subdirectory);
        }
    }

    /**
     * @param string $fullPath
     *
     * @throws Exception
     */
    public function addFile($fullPath)
    {
        if (!preg_match('/.\.php$/i', $fullPath)) {
            return;
        }
        $target = null;
        if (is_link($fullPath)) {
            $target = @readlink($fullPath);
            if ($target === false) {
                throw new Exception("Failed to read target of symbolic link {$fullPath}");
            }
            $target = str_replace(DIRECTORY_SEPARATOR, '/', $target);
            $target = $this->resolvePath($target, dirname($fullPath));
        } else {
            $contents = @file_get_contents($fullPath);
            if ($contents === false) {
                throw new Exception("Failed to read content of file {$fullPath}");
            }
            if (strpos($contents, "\n") === false && preg_match('_^\.\.?/_', $contents)) {
                $target = $this->resolvePath($contents, dirname($fullPath));
            } else {
                if ($this->operation === self::OPERATION_CREATE) {
                    $md5 = @md5($contents);
                    if ($md5 === false) {
                        throw new Exception("Failed to calculate MD5 of file {$fullPath}");
                    }
                } else {
                    $md5 = true;
                }
                $this->filesMD5[$fullPath] = $md5;
            }
        }
        if ($target !== null) {
            if (!is_file($target)) {
                throw new Exception("{$fullPath} links to non existing {$target}");
            }
            $this->symlinks[$fullPath] = $target;
        }
    }

    public function process()
    {
        switch ($this->operation) {
            case self::OPERATION_CREATE:
                $this->createSymlinks();
                break;
            case self::OPERATION_EXPAND:
                $this->expandSymlinks();
                break;
        }
    }

    protected function createSymlinks()
    {
        $md5s = array_unique(array_values($this->filesMD5));
        $total = count($md5s);
        $current = 0;
        foreach ($md5s as $md5) {
            $current++;
            echo "Looking for same-content files [{$current}/{$total}]\n";
            $similarFiles = array_keys(array_filter($this->filesMD5, function ($value) use ($md5) { return $value === $md5; }));
            if (count($similarFiles) > 1) {
                $contentMap = array();
                foreach ($similarFiles as $similarFile) {
                    $content = @file_get_contents($similarFile);
                    if ($content === false) {
                        throw new Exception("Failed to read file {$similarFile}");
                    }
                    if (!isset($contentMap[$content])) {
                        $contentMap[$content] = array();
                    }
                    $contentMap[$content][] = $similarFile;
                }
                foreach ($contentMap as $sameFiles) {
                    $numLinks = count($sameFiles) - 1;
                    if ($numLinks > 0) {
                        $sameFiles = sortPaths($sameFiles);
                        $target = array_shift($sameFiles);
                        $links = array_values($sameFiles);
                        echo " - creating {$numLinks} symbolic links pointing to {$target}... ";
                        foreach ($links as $link) {
                            $this->createSymlink($link, $target);
                            unset($this->filesMD5[$link]);
                            $this->symlinks[$link] = $target;
                        }
                        echo "done.\n";
                    }
                }
            }
        }
    }

    /**
     * @param string $link
     * @param string $target
     *
     * @throws Exception
     */
    protected function createSymlink($link, $target)
    {
        $initialDirectory = @getcwd();
        if ($initialDirectory === false) {
            throw new Exception("Failed to determine current directory");
        }
        $linkName = basename($link);
        $linkDir = dirname($link);
        $targetRelative = $this->getTargetRelativePath($link, $target);
        if (@file_exists($link)) {
            if (@unlink($link) === false) {
                @chdir($initialDirectory);
                throw new Exception("Failed to delete file {$link}");
            }
        }
        if (@chdir($linkDir) === false) {
            throw new Exception("Failed to enter directory {$linkDir}");
        }
        if ($this->linkProgram === null) {
            $symlinked = @symlink(str_replace('/', DIRECTORY_SEPARATOR, $targetRelative), $linkName);
            @chdir($initialDirectory);
            if ($symlinked === false) {
                throw new Exception("Failed to create link {$link} to {$target}");
            }
        } else {
            $command = $this->linkProgram[0] . ' ' . sprintf(
                $this->linkProgram[1],
                escapeshellarg(str_replace('/', DIRECTORY_SEPARATOR, $targetRelative)),
                escapeshellarg($linkName)
            ) . ' 2>&1';
            $output = array();
            $rc = -1;
            exec($command, $output, $rc);
            @chdir($initialDirectory);
            if ($rc !== 0) {
                throw new Exception("{$this->linkProgram[0]} failed: " . trim(implode("\n", $output)));
            }
        }
        if (!is_link($link)) {
            throw new Exception("Failed to create link {$link} to {$target}");
        }
        $actualTarget = @readlink($link);
        if ($actualTarget === false) {
            @unlink($link);
            throw new Exception("Failed to read link {$link}");
        }
        $actualTarget = str_replace(DIRECTORY_SEPARATOR, '/', $actualTarget);
        if ($actualTarget !== $target && $actualTarget !== $targetRelative) {
            @unlink($link);
            throw new Exception("Failed to create link {$link} (created as {$actualTarget} instead of {$target} or {$targetRelative}).");
        }
    }
    /**
     * @param string $relativePath
     * @param string $referenceDirectory
     *
     * @return string
     */
    protected function resolvePath($relativePath, $referenceDirectory)
    {
        if ($relativePath !== '') {
            if ($relativePath[0] === '/') {
                $result = $relativePath;
            }
            if (DIRECTORY_SEPARATOR === '\\' && preg_match('_^[A-Z]:/_i', $relativePath)) {
                return $relativePath;
            }
        }
        $relativePathParts = explode('/', $relativePath);
        $result = explode('/', $referenceDirectory);
        while (($part = array_shift($relativePathParts)) !== null) {
            switch($part) {
                case '.':
                    break;
                case '..':
                    if (array_pop($result) === null) {
                        throw new Exception('Too many parent paths (..).');
                    }
                    break;
                default:
                    $result[] = $part;
                    break;
            }
        }
        return implode('/', $result);
    }

    /**
     * @param string $to
     *
     * @return string
     */
    protected function getTargetRelativePath($link, $target)
    {
        $linkParts = explode('/', $link);
        $targetParts = explode('/', $target);
        while (($linkPart = array_shift($linkParts)) !== null) {
            if ($targetParts[0] === $linkPart) {
                array_shift($targetParts);
                $targetParts = array_values($targetParts);
                continue;
            }
            if (count($linkParts) > 0) {
                $padLength = count($targetParts) + count($linkParts);
                $targetParts = array_pad($targetParts, -$padLength, '..');
            } else {
                $targetParts[0] = './' . $targetParts[0];
            }
            break;
        }
        
        return implode('/', $targetParts);
    }

    protected function getActualTarget($target)
    {
        if (isset($this->filesMD5[$target])) {
            return $target;
        }
        if (isset($this->symlinks[$target])) {
            return $this->getActualTarget($this->symlinks[$target]);
        }
        throw new UserMessageException("The link target {$target} is outside of the data directory.");
    }

    protected function expandSymlinks()
    {
        $count = count($this->symlinks);
        if ($count === 0) {
            echo "No symbolic links found.\n";
            return;
        }
        $progress = 0;
        $symlinksPaths = array_keys($this->symlinks);
        while (($symlinksPath = array_shift($symlinksPaths)) !== null) {
            $progress++;
            echo "Expanding {$symlinksPath} [{$progress}/$count]... ";
            $actualFile = $this->getActualTarget($this->symlinks[$symlinksPath]);
            $contents = @file_get_contents($actualFile);
            if ($contents === false) {
                throw new UserMessageException("Failed to read file {$actualFile}");
            }
            if (@unlink($symlinksPath) === false) {
                throw new UserMessageException("Failed to remove symbolic link {$symlinksPath}");
            }
            unset($this->symlinks[$symlinksPath]);
            if (@file_put_contents($symlinksPath, $contents) === false) {
                throw new UserMessageException("Failed to set actual data for {$symlinksPath}");
            }
            $this->filesMD5[$symlinksPath] = true;
            echo "done.\n";
        }
    }
}

/**
 * @param string[] $paths
 *
 * @return string[]
 */
function sortPaths(array $paths)
{
    $keyed = array();
    foreach ($paths as $path) {
        $path = str_replace(DIRECTORY_SEPARATOR, '/', $path);
        $keyed[$path] = str_replace('/', ' ', $path);
    }
    asort($keyed);
    
    return array_keys($keyed);
}
